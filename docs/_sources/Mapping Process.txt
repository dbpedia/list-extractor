Mapping Process
---------------

When used in single resource mode, the extractor asks the endpoint for every rdf:type associated to it and tries to apply every matching mapping (for example, if a person is both a writer and an actor, it will look for both lists related to bibliography and filmography). On the other hand, if using all resources mode, it will apply the related class mapping to each collected resource.

**mapper** module confronts the resource type(s) with a value from MAPPING dictionary inside **mapping_rules** and finds the name of the corresponding mapping function.

- For *writers*, a bibliography mapping is applied to form triples having the literary work as subject, related to its author (the examined resource), publication year and ISBN if present. 

- For *actors*, a filmography mapping is applied to form triples having the movie as subject, related to its type (Film, Cartoon, TV show..), its release year and to the resource by specifying the part took in it (starring, director, producer...)

The **mapping_rules.py** file can be easily extended with new mappings, both to reach new languages and domains or to add new section keywords, thus extending the potential of List Extractor. For a new domain to be added, it is also necessary to write a new mapping function in mapper.py, which must be in the form of 'map_(ValueFromMAPPING)'.

The first and foremost dictionary is called MAPPING and links each class to its mapping topic (e.g. Writer to Bibliography); for each value in MAPPING there is another dictionary with the same name containing the specific key-words for that domain divided by language, to be matched with section titles of interest. Other dictionaries sharing the same structure are used to extract further properties from section names, like the literary genre of a written work.